jobs:
  include:

    # TAG PRERELEASE

    -  # OSX
      if: tag IS present
      os: osx
      osx_image: xcode9.0
      language: node_js
      node_js: "8"
      env:
        - NEED_TEST=true
        - NEED_BUILD=true
        - NEED_RELEASE=true
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
    -  # LINUX
      if: tag IS present
      os: linux
      services: docker
      language: generic
      env:
        - NEED_TEST=true
        - NEED_BUILD=true
        - NEED_RELEASE=true

    # TEST-ONLY

    -  # OSX
      if: branch = master AND type = pull_request # branch = production
      os: osx
      osx_image: xcode9.0
      language: node_js
      node_js: "8"
      env:
        - NEED_TEST=true
        - NEED_BUILD=false
        - NEED_RELEASE=false
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder

    # TEST + BUILD

    -  # OSX
      if: branch = production AND type = pull_request
      os: osx
      osx_image: xcode9.0
      language: node_js
      node_js: "8"
      env:
        - NEED_TEST=true
        - NEED_BUILD=true
        - NEED_RELEASE=false
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
    -  # LINUX
      if: branch = production AND type = pull_request
      os: linux
      services: docker
      language: generic
      env:
        - NEED_TEST=true
        - NEED_BUILD=true
        - NEED_RELEASE=false
    
    # TEST + BUILD + RELEASE

    -  # OSX
      if: branch = production AND type != pull_requst
      os: osx
      osx_image: xcode9.0
      language: node_js
      node_js: "8"
      env:
        - NEED_TEST=true
        - NEED_BUILD=true
        - NEED_RELEASE=true
        - ELECTRON_CACHE=$HOME/.cache/electron
        - ELECTRON_BUILDER_CACHE=$HOME/.cache/electron-builder
    -  # LINUX
      if: branch = production AND type != pull_request
      os: linux
      services: docker
      language: generic
      env:
        - NEED_TEST=true
        - NEED_BUILD=true
        - NEED_RELEASE=true

cache:
  directories:
  - node_modules
  - $HOME/.cache/electron
  - $HOME/.cache/electron-builder

before_cache:
  - rm -rf $HOME/.cache/electron-builder/wine

before_install:
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      mkdir -p /tmp/git-lfs && curl -L https://github.com/github/git-lfs/releases/download/v2.3.1/git-lfs-$([ "$TRAVIS_OS_NAME" == "linux" ] && echo "linux" || echo "darwin")-amd64-2.3.1.tar.gz | tar -xz -C /tmp/git-lfs --strip-components 1
      export PATH="/tmp/git-lfs:$PATH"
    fi

before_script:
  - git lfs pull

script:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      docker run --rm \
        --env-file <(env | grep -iE 'DEBUG|NODE_|NEED_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS|APPVEYOR_|CSC_|_TOKEN|_KEY|AWS_|STRIP|BUILD_') \
        -v ${PWD}:/project \
        -v ~/.cache/electron:/root/.cache/electron \
        -v ~/.cache/electron-builder:/root/.cache/electron-builder \
        electronuserland/builder:wine \
        /bin/bash -c "yarn --link-duplicates --pure-lockfile && if [[ $NEED_BUILD = true ]]; then yarn build --linux --win; fi"
    else
      npm i
      if [ "$NEED_TEST" = true ]; then npm run test; fi
      if [ "$NEED_BUILD" = true ]; then npm run build; fi
    fi
deploy:
  # prod builds
  - provider: releases
    api_key: $GH_TOKEN
    file_glob: true
    prerelease: $TRAVIS_TAG != ""
    file:
      - dist/*.dmg
      - dist/*.exe
      - dist/*.AppImage
      - dist/*.deb
      - dist/*.rpm
    skip_cleanup: true
    on:
      tags: true
      condition: $NEED_RELEASE == true

branch:
  only:
    - master
    - production
    - /^@/